lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
map_options <- list(
scope = 'europe',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
shiny::runApp('D:/Github/shiny/q3')
pickXY(my_data)
library(shiny)
library(miniUI)
pickXY <- function() {
ui <- miniPage(
gadgetTitleBar("Select Points by Dragging your Mouse"),
miniContentPanel(
plotOutput("plot", height = "100%", brush = "brush")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
plot(data_frame$X, data_frame$Y, main = "Plot of Y versus X",
xlab = "X", ylab = "Y")
})
observeEvent(input$done, {
stopApp(brushedPoints(data_frame, input$brush,
xvar = "X", yvar = "Y"))
})
}
runGadget(ui, server)
}
my_data <- data.frame(X = rnorm(100), Y = rnorm(100))
pickXY(my_data)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
install.packages("leaflet")
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
library(leaflet)
my_map <- leaflet() %>%
addTiles()
my_map
my_map=leaflet()
my_map=addTiles(my_map)
my_map
my_map <- leaflet() %>%
addMarkers(lat=49.2220031,lng=16.5317850,popup = "Where is Rady")
my_map
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=49.2220031,lng=16.5317850,popup = "Where is Rady")
my_map
my_map <- leaflet() %>%
addTiles() %>%
addMarkers(lat=49.2220031,lng=16.5317850,popup = "Here is Rady")
my_map
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=49.2220031,lng=16.5317850,popup = "Here is Rady")
my_map
my_map <- my_map %>%
addMarkers(lat=48.5214780,lng=17.4237850,popup = "Here is Rady")
my_map
my_map <- leaflet() %>%
addTiles()
my_map
my_map <- my_map %>%
addMarkers(lat=48.5214780,lng=17.4237850,popup = "Here is Rady")
my_map
set.seed(2016-04-25)
df <- data.frame(lat = runif(20, min = 39.2, max = 39.3),
lng = runif(20, min = -76.6, max = -76.5))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers()
hopkinsIcon <- makeIcon(
iconUrl = "http://brand.jhu.edu/content/uploads/2014/06/university.shield.small_.blue_.png",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsIcon <- makeIcon(
iconUrl = "https://grcf.jhmi.edu/wp-content/uploads/2013/07/medicine.shield.small_.blue_.jpg",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
hopkinsLatLong <- data.frame(
lat = c(39.2973166, 39.3288851, 39.2906617),
lng = c(-76.5929798, -76.6206598, -76.5469683))
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon)
hopkinsSites <- c(
"<a href='http://www.jhsph.edu/'>East Baltimore Campus</a>",
"<a href='https://apply.jhu.edu/visit/homewood/'>Homewood Campus</a>",
"<a href='http://www.hopkinsmedicine.org/johns_hopkins_bayview/'>Bayview Medical Center</a>",
"<a href='http://www.peabody.jhu.edu/'>Peabody Institute</a>",
"<a href='http://carey.jhu.edu/'>Carey Business School</a>"
)
hopkinsLatLong %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = hopkinsIcon, popup = hopkinsSites)
df <- data.frame(lat = runif(500, min = 39.25, max = 39.35),
lng = runif(500, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addMarkers(clusterOptions = markerClusterOptions())
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
md_cities <- data.frame(name = c("Baltimore", "Frederick", "Rockville", "Gaithersburg",
"Bowie", "Hagerstown", "Annapolis", "College Park", "Salisbury", "Laurel"),
pop = c(619493, 66169, 62334, 61045, 55232,
39890, 38880, 30587, 30484, 25346),
lat = c(39.2920592, 39.4143921, 39.0840, 39.1434, 39.0068, 39.6418, 38.9784, 38.9897, 38.3607, 39.0993),
lng = c(-76.6077852, -77.4204875, -77.1528, -77.2014, -76.7791, -77.7200, -76.4922, -76.9378, -75.5994, -76.8483))
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 1, radius = sqrt(md_cities$pop) * 30)
md_cities %>%
leaflet() %>%
addTiles() %>%
addCircles(weight = 10, radius = sqrt(md_cities$pop) * 30)
leaflet() %>%
addTiles() %>%
addRectangles(lat1 = 37.3858, lng1 = -122.0595,
lat2 = 37.3890, lng2 = -122.0625)
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55),
col = sample(c("red", "blue", "green"), 20, replace = TRUE),
stringsAsFactors = FALSE)
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers(color = df$col) %>%
addLegend(labels = LETTERS[1:3], colors = c("blue", "red", "green"))
head(df)
df %>% leaflet() %>% addTiles()
leaflet(df) %>% addTiles()
addTiles(leaflet(df))
leaflet(addTiles(df))
df(leaflet(addTiles()))
knitr::opts_chunk$set(echo = TRUE)
file <- "D:/Github/np_leaflet.csv"
read.csv(file)
phrana <- "D:/Github/np_leaflet.csv"
phrana
read.csv(phrana)
phrana <- "D:/Github/np_leaflet/prava-hrana.csv"
read.csv(phrana)
phrana
ph_trail <- read.csv(phrana)
ph_trail
ph_trail <- read.csv(phrana,header=FALSE,names=c("lat","lon"))
?read.csv
ph_trail <- read.csv(phrana,header=FALSE,sep=",",col.names=c("lat","lon"))
ph_trail
is.data.frame(ph_trail)
ph_trail <- read.csv(phrana,header=FALSE,sep=",",col.names=c("lat","lng"))
library(leaflet)
my_map <-    ph_trail %>%
leaflet() %>%
addTiles() %>%
my_map
ph_trail %>%
leaflet() %>%
addTiles()
library(leaflet)
ph_trail %>%
leaflet() %>%
addTiles()
ph_trail <- read.csv(phrana,header=FALSE,sep=",",col.names=c("lat","lng"))
ph_trail
df <- data.frame(lat = runif(20, min = 39.25, max = 39.35),
lng = runif(20, min = -76.65, max = -76.55))
df %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
df
library(leaflet)
ph_trail %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
bd_icon <- makeIcon(
iconUrl = "https://en.wikipedia.org/wiki/File:Ski_trail_rating_symbol-black_diamond.svg",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
ph_trail %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = bd_icon)
bd_icon <- makeIcon(
iconUrl = "https://en.wikipedia.org/wiki/File:Ski_trail_rating_symbol-black_diamond.svg",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16
)
bd_icon
ph_trail %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = bd_icon)
ph_trail %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
bd_icon <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/0/0c/Ski_trail_rating_symbol-black_diamond.svg",
iconWidth = 31*215/230, iconHeight = 31,
iconAnchorX = 31*215/230/2, iconAnchorY = 16)
ph_trail %>%
leaflet() %>%
addTiles() %>%
addCircleMarkers()
ph_trail %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = bd_icon)
ph_trail %>%
leaflet() %>%
addTiles() %>%
addMarkers(icon = bd_icon,popup=bd_site) %>%
addLegend(labels = "Black Diamond", colors = c("black"))
mean
print
methods("mean")
show
# Create data frame
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
library(plotly)
library(tidyr)
library(dplyr)
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
?plot_ly
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'world',
projection = list(type = 'albers usa')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'countries',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'world',
projection = list(type = 'albers usa')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'usa-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
state_pop <- data.frame(State = state.abb, Pop = as.vector(state.x77[,1]))
# Create hover text
state_pop$hover <- with(state_pop, paste(State, '<br>', "Population:", Pop))
# Make state borders white
borders <- list(color = toRGB("red"))
# Set up some mapping options
map_options <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(z = ~state_pop$Pop, text = ~state_pop$hover, locations = ~state_pop$State,
type = 'choropleth', locationmode = 'USA-states',
color = state_pop$Pop, colors = 'Blues', marker = list(line = borders)) %>%
layout(title = 'US Population in 1975', geo = map_options)
knitr::opts_chunk$set(echo = FALSE)
library(plotly)
library(tidyr)
library(dplyr)
tepsr_sp410_csv <- "D:/Github/np_plotly/tepsr_sp410.csv"
tepsr_sp410 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",col.names=c("short","cname","sp410"))
tepsr_sp410$cname
library(plotly)
library(tidyr)
library(dplyr)
# EUROSTAT
# Source: https://ec.europa.eu/eurostat/databrowser/view/tps00203/default/table?lang=en
# Code: TPS00203   last update: 01/08/2019 23:00
tps_00203_csv <- "D:/Github/np_plotly/tps_00203.csv"
tps_00203 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",col.names=c("cname","sp410"),na.strings = ":")
tps_00203_csv <- "D:/Github/np_plotly/tps_00203.csv"
tps_00203 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",col.names=c("cname","sp410"),na.strings = ":")
tps_00203_csv <- "D:/Github/np_plotly/tps_00203.csv"
tps_00203 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",col.names=c("cname","sp410"),na.strings = ":")
tps_00203_csv <- "D:/Github/np_plotly/tps_00203.csv"
tps_00203 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",col.names=c("cname","tps00203"),na.strings = ":")
tps_00203 <- read.csv(tepsr_sp410_csv,header=FALSE,sep=",",na.strings = ":")
tps_00203
tps_00203_csv <- "D:/Github/np_plotly/tps_00203.csv"
tps_00203 <- read.csv(tps_00203_csv,header=FALSE,sep=",",col.names=c("cname","tps00203"),na.strings = ":")
install.packages("swirlify")
library(swirlify)
shiny::runApp('D:/Github/shiny/mpg_predict')
data("longley")
dim(longley)
head(longley)
runApp('D:/Github/shiny/shiny_project')
model1 <- lm(Unemployed~Population, data=longley)
runApp('D:/Github/shiny/mpg_predict')
runApp('D:/Github/shiny/shiny_project')
runApp('D:/Github/shiny/mpg_predict')
runApp()
runApp('D:/Github/shiny/mpg_predict')
longley$Population
names(mtcars)
runApp('D:/Github/shiny/mpg_predict')
runApp('D:/Github/shiny/shiny_project')
names(longley)
runApp('D:/Github/shiny/shiny_project')
model1 <- lm(Unemployed~Population, data=longley)
runApp('D:/Github/shiny/shiny_project')
model1 <- lm(Unemployed~Population, data=longley)
runApp('D:/Github/shiny/shiny_project')
longley$Population
longley$Population - 100
longley$Population - 110 > 0
runApp('D:/Github/shiny/shiny_project')
runApp('D:/Github/shiny/mpg_predict')
runApp()
runApp('D:/Github/shiny/mpg_predict')
plot(longley$Unemployed,longley$Population,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 16, color="blue",
xlim=c(100,130),ylim = c(180,400))
plot(longley$Unemployed,longley$Population,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 16,
xlim=c(100,130),ylim = c(180,400))
warnings()
plot(longley$Unemployed,longley$Population,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 16,
xlim=c(100,130),ylim = c(180,400))
plot(longley$Population,longley$Unemployed,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 16,
xlim=c(100,130),ylim = c(180,400))
plot(longley$Population,longley$Unemployed,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 14,
xlim=c(100,130),ylim = c(180,400))
plot(longley$Population,longley$Unemployed,xlab = "Population (in 100K units)",
ylab="Unemployment",bty = "n", pch = 14,
xlim=c(100,130),ylim = c(180,400))
abline(model1,col="red",lwd = 2)
legend(250,250,c("Model Prediction"),pch = 16,
col = c("red"), bty = "n", cex = 1.2)
points(POPInput,model1pred(),col="red",pch=16, cex = 2)
POPInput <- input$sliderPOP
runApp('D:/Github/shiny/shiny_project')
runApp()
runApp('D:/Github/shiny/shiny_project')
int(5,45)
runApp('D:/Github/shiny/shiny_project')
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
getwd()
Slide #4444
========================================================
Slide #4444
========================================================
setwd("D:/Github/shiny/shiny_project")
setwd("D:/Github/shiny")
setwd("D:/Github/shiny/shiny_project")
library(ggplot2)
data("longley")
gg <- ggplot(longley, aes(x=Population, y=Unemployed)) +
geom_point(size=3) +
xlim(c(100, 130)) +
ylim(c(180, 400)) +
labs(subtitle="Simple linear model to display shiny functionality",
y="Unemployed",
x="Population",
title="Unemployed per Population Size",
caption = "Source: data(longley)")
gg <- gg + geom_abline(slope=model1$coefficients[2],
intercept=model1$coefficients[1],color='red',size=2)
gg <- gg + geom_point(aes(x=POPInput,y=model1pred()),color='orange',size=5) +
geom_label(aes(115+1,296-10,label=paste(POPInput,trunc(model1pred(),0),sep=",")))
plot(gg)
library(ggplot2)
data("longley")
model1 <- lm(Unemployed~Population, data=longley)
gg <- ggplot(longley, aes(x=Population, y=Unemployed)) +
geom_point(size=3) +
xlim(c(100, 130)) +
ylim(c(180, 400)) +
labs(subtitle="Simple linear model to display shiny functionality",
y="Unemployed",
x="Population",
title="Unemployed per Population Size",
caption = "Source: data(longley)")
gg <- gg + geom_abline(slope=model1$coefficients[2],
intercept=model1$coefficients[1],color='red',size=2)
gg <- gg + geom_point(aes(x=115,y=296),color='orange',size=5) +
geom_label(aes(115+1,296-10,label=paste(POPInput,trunc(model1pred(),0),sep=",")))
plot(gg)
library(ggplot2)
data("longley")
model1 <- lm(Unemployed~Population, data=longley)
gg <- ggplot(longley, aes(x=Population, y=Unemployed)) +
geom_point(size=3) +
xlim(c(100, 130)) +
ylim(c(180, 400)) +
labs(subtitle="Simple linear model to display shiny functionality",
y="Unemployed",
x="Population",
title="Unemployed per Population Size",
caption = "Source: data(longley)")
gg <- gg + geom_abline(slope=model1$coefficients[2],
intercept=model1$coefficients[1],color='red',size=2)
gg <- gg + geom_point(aes(x=115,y=296),color='orange',size=5) +
geom_label(aes(115+1,296-10,label=paste(115,296),sep=",")))
plot(gg)
library(ggplot2)
data("longley")
model1 <- lm(Unemployed~Population, data=longley)
gg <- ggplot(longley, aes(x=Population, y=Unemployed)) +
geom_point(size=3) +
xlim(c(100, 130)) +
ylim(c(180, 400)) +
labs(subtitle="Simple linear model to display shiny functionality",
y="Unemployed",
x="Population",
title="Unemployed per Population Size",
caption = "Source: data(longley)")
gg <- gg + geom_abline(slope=model1$coefficients[2],
intercept=model1$coefficients[1],color='red',size=2)
gg <- gg + geom_point(aes(x=115,y=296),color='orange',size=5) +
geom_label(aes(115+1,296-10,label=paste(115,296),sep=","))
plot(gg)
setwd("D:/Github/shiny")
getwd()
setwd("D:/Github/shiny")
